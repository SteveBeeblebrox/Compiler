###
# ZOBOS.CFG --- ZOBOS and CZAR compiler projects
# This is an SLR(1) grammar
###
MODULE    -> MODPARTS $

# a MODULE is a *non-empty* collection of global DECLIDs, FUNSIGs,
# or FUNCTION definitions
MODPARTS  -> GOTDECLLIST sc | GOTDECLLIST sc MODPARTS
           | GFTDECLLIST sc | GFTDECLLIST sc MODPARTS
           | FUNSIG sc | FUNSIG sc MODPARTS
           | FUNCTION  | FUNCTION  MODPARTS
           | EMIT   sc | EMIT   sc MODPARTS
           | RAND   sc | RAND   sc MODPARTS
           | IF        | IF        MODPARTS
           | IFELSE    | IFELSE    MODPARTS
           | WHILE     | WHILE     MODPARTS
           | DOWHILE   | DOWHILE   MODPARTS
           | ASSIGN sc | ASSIGN sc MODPARTS


GOTDECLLIST -> OTHERTYPE DECLIDS
GFTDECLLIST -> FUNTYPE DECLIDS

FUNTYPE   -> bool | int | float 
OTHERTYPE -> const bool
           | const int
           | const float
           | string

# function signatures (aka "header" or prototype) 
FUNSIG    -> FUNTYPE id lparen PARAMLIST rparen
PARAMLIST -> FUNTYPE id comma PARAMLIST 
           | FUNTYPE id
           | lambda
#KEH-2023
#NOPARAMS  -> lambda

# function definitions implicitly declare a variable holding the 
# return value (returns _id_) before any function definition statements
FUNCTION  -> FUNSIG returns id assign EXPR STEPS

# BRACESTMTS are wrapped with open/close scope triggering terminals
BRACESTMTS -> lbrace BSTMTS rbrace
BSTMTS    -> BSTMTS BSTMT
           | lambda
BSTMT     -> BRACESTMTS
           | DECLLIST sc
           | ASSIGN sc
           | IF
           | IFELSE
           | DOWHILE 
           | WHILE
           | EMIT sc
           | RAND sc

# SOLOSTMT are those one-liners we permit after if( ), else, while( ) 
# note the absence of DECLLIST, so we can't do
#   if( x < y ) int x;
# and conditionally declare a variable
SOLOSTMT  -> ASSIGN sc
           | IF
           | IFELSE
           | WHILE
           | EMIT sc
           | RAND sc

STEPS     -> BRACESTMTS 
           | SOLOSTMT
		   | sc

# declaring variables
DECLTYPE  -> FUNTYPE | OTHERTYPE
         

DECLID    -> id 
           | ASSIGN
DECLIDS   -> DECLID
           | DECLIDS comma DECLID
DECLLIST  -> DECLTYPE DECLIDS 

# assignment
ASSIGN    -> id assign EXPR 
           | id assign ASSIGN

# control structures
IF        -> if lparen BEXPR rparen STEPS
IFELSE    -> if lparen BEXPR rparen BRACESTMTS else STEPS
WHILE     -> while lparen BEXPR rparen STEPS
DOWHILE   -> do BRACESTMTS while lparen BEXPR rparen sc

EXPR      -> BEXPR | AEXPR | FUNCALL

# function calls
FUNCALL   -> id lparen ARGLIST rparen
ARGLIST   -> ARGLIST comma EXPR
           | EXPR
           | lambda

# boolean expressions, true and false are lexed as 1B, 0B
BOOLS     -> lt | leq | eq | geq | gt
BEXPR     -> AEXPR BOOLS AEXPR

# arithmetic expressions
PLUS      -> plus | minus
TIMES     -> mult | div | mod
AEXPR     -> SUM
SUM       -> SUM PLUS PRODUCT
           | PRODUCT
PRODUCT   -> PRODUCT TIMES VALUE
           | VALUE
VALUE     -> lparen EXPR rparen 
           | domain lparen EXPR rparen
           | intval
           | floatval
           | stringval
           | id 
           | UNARY
           | CAST
UNARY     -> PLUS VALUE
           | not VALUE
           | compl VALUE
CAST      -> bool lparen EXPR rparen
           | int lparen EXPR rparen
           | float lparen EXPR rparen

# The first EMIT form would produce the string variable id on an output device,
# the first AEXPR is the initial character index, the second AEXPR is the
# number of characters to emit.
# The second EMIT form produces the AEXPR value on an output device. 
# On  emit symtable, write the current symbol table to the third command line
# argument provided to ZOBOS
EMIT      -> emit id comma AEXPR comma AEXPR
           | emit lparen AEXPR rparen
           | emit symtable

# If id is a float: stores a Uniform(0,1) values
# If id is a bool:  stores a Bernoulli result, One or Zero
# If id is an int:  requires two other AEXPR args that resolve to integer values,
#                   stores an Equalikely(a,b) value in the first identifier
RAND      -> rand id 
           | rand id comma AEXPR comma AEXPR
